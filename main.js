let catImg = document.getElementById('cat');
let hungerBar = document.getElementById('hunger');
let boredomBar = document.getElementById('boredom');
let sleepinessBar = document.getElementById('sleepiness');
let questionBlock = document.getElementById('secretQuestion');

let currentRequest = null;
let isBusy = false;

let secretcheck = 0

function setInitialValues() {
  hungerBar.value = 20;
  boredomBar.value = 20;
  sleepinessBar.value = 20;
}

function randomDecrease() {
  let stats = ['hunger', 'boredom', 'sleepiness'];
  let stat = stats[Math.floor(Math.random() * stats.length)];

  if (stat === 'hunger' && hungerBar.value > 0) hungerBar.value -= 10;
  if (stat === 'boredom' && boredomBar.value > 0) boredomBar.value -= 10;
  if (stat === 'sleepiness' && sleepinessBar.value > 0) sleepinessBar.value -= 10;

  updateRequest();
}

function updateRequest() {
  let needs = [];
  if (hungerBar.value < 100) needs.push('feed');
  if (boredomBar.value < 100) needs.push('play');
  if (sleepinessBar.value < 100) needs.push('wash');

  if (needs.length > 0) {
    currentRequest = needs[Math.floor(Math.random() * needs.length)];
    displayRequest();
  } else {
    currentRequest = null;
    hideRequest();
  }
}

function displayRequest() {
  let text = '';
  switch (currentRequest) {
    case 'feed': text = '–ü–æ–∫–æ—Ä–º–∏ –º–µ–Ω—è!ü•©'; break;
    case 'play': text = '–ü–æ–≥–ª–∞–¥—å –º–µ–Ω—è!‚úã'; break;
    case 'wash': text = '–ü–æ–º–æ–π –º–µ–Ω—è!üõÅ'; break;
  }
  document.getElementById('statusText').textContent = text;
}

function hideRequest() {
  document.getElementById('statusText').textContent = '';
}

function feedCat() {
  if (currentRequest !== 'feed' || isBusy) return;
  doAction('assets/cat_eat.png', hungerBar);
}

function playWithCat() {
  if (currentRequest !== 'play' || isBusy) return;
  doAction('assets/cat_play.png', boredomBar);
}

function washCat() {
  if (currentRequest !== 'wash' || isBusy) return;
  doAction('assets/cat_wash.png', sleepinessBar);
}

function doAction(imgSrc, bar) {
  isBusy = true;
  catImg.src = imgSrc;
  bar.value += 10;
  checkForSecret()
  setTimeout(() => {
    catImg.src = 'assets/cat_idle.png';
    isBusy = false;
    updateRequest();
  }, 1500);
}

function checkForSecret() {
  if (hungerBar.value === 100 && boredomBar.value === 100 && sleepinessBar.value === 100) {
    questionBlock.style.display = 'flex';
  }
}

function toggleSecretMenu() {
  let menu = document.getElementById('secretMenu');
  menu.style.display = (menu.style.display === 'flex') ? 'none' : 'flex';
}

function submitSecret() {
  let code = document.getElementById('secretCode').value.trim();
  if (code === '090125') {
    showSecretDialog();
    catImg.src = 'assets/cat_play.png';
  } else {
    alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!');
  }
}

function showSecretDialog() {
  document.getElementById('secretText').innerHTML = '–¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É, –Ω–∞–∂–º–∏ <a href="https://t.me/paranoidghoul">—Å—é–¥–∞</a>';
  document.getElementById('secretDialog').style.display = 'flex';
}

function closeSecretDialog() {
  document.getElementById('secretDialog').style.display = 'none';
}


function acceptSecret() {
  alert('üò∏ –ö–æ–¥ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã, –ø–æ–¥—Å–∫–∞–∑–∫–∞: –¥–∞—Ç–∞ –Ω–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú–ì–ìüîê!');
  questionBlock.style.display = 'none';
}

function declineSecret() {
  alert('üòæ –ú–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!');
  questionBlock.style.display = 'none';
}

// —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã


window.onload = function() {
  setTimeout(() => {
    document.getElementById('splashScreen').style.opacity = '0';
    setTimeout(() => {
      document.getElementById('splashScreen').style.display = 'none';
      // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      showGameDialog();
    }, 1000);
  }, 2000);
}


const dialogScript = [
  {
    text: "–ú—è—É! –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ß–∞–µ–∫‚òï",
    answers: ["–î–∞–ª—å—à–µ"]
  },
  {
    text: "–¢—ã –ª—é–±–∏—à—å –∫–æ—Ç–∏–∫–æ–≤?üò∏",
    answers: ["–î–∞!"]
  },
  {
    text: "–ú—è—É! –Ø –æ—á–µ–Ω—å –≤—Ä–µ–¥–Ω—ã–π –∫–æ—Ç, –∏ –≤–µ—á–Ω–æ —á—Ç–æ-—Ç–æ —Ö–æ—á—É: –∫—É—à–∞—Ç—å,–∏–≥—Ä–∞—Ç—å –∏ –º—ã—Ç—å—Å—è! –¢—ã —É–≤–µ—Ä–µ–Ω–∞ —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∏—à—å –º–µ–Ω—è?üò∫",
    answers: ["–î–∞!"]
  },
  {
    text: "–ú—è—É! –ù—É—É—É, –ø–æ—Å–º–æ—Ç—Ä–∏–º. –ï—Å–ª–∏ —Ç—ã —Å–º–æ–∂–µ—à—å —Ç–æ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –∫–æ–µ —á—Ç–æ)üò∫",
    answers: ["–ü–æ—à–ª–∏ —É–∂–µ!"]
  }
];

let dialogStep = 0;

function showGameDialog() {
  const dialog = dialogScript[dialogStep];
  document.getElementById('gameDialogText').textContent = dialog.text;

  const buttonsDiv = document.getElementById('gameDialogButtons');
  buttonsDiv.innerHTML = '';
  dialog.answers.forEach((answerText, index) => {
    const btn = document.createElement('button');
    btn.textContent = answerText;
    btn.onclick = () => handleDialogAnswer(index);
    buttonsDiv.appendChild(btn);
  });

  document.getElementById('gameDialog').style.display = 'flex';
}

function handleDialogAnswer(index) {
  dialogStep++;
  if (dialogStep >= dialogScript.length) {
    document.getElementById('gameDialog').style.display = 'none';
    setInitialValues();
    setInterval(randomDecrease, 5000);
    // –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ ‚Äî –¥–∏–∞–ª–æ–≥ –∏—Å—á–µ–∑–∞–µ—Ç, –≤—Å—ë –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
  } else {
    showGameDialog();
  }
}
